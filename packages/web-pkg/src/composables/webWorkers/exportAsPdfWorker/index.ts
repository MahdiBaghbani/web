import { HttpError, Resource, SpaceResource } from '@ownclouders/web-client'
import { useWebWorkersStore } from '../../piniaStores/webWorkers'
import ExportAsPdfWorker from './worker?worker'
import { unref } from 'vue'
import { useLoadingService } from '../../../composables/loadingService'
import { useRequestHeaders } from '../../../composables/requestHeaders'
import { useConfigStore } from '../../piniaStores'
import { useMermaid } from './useMermaid'
import { useImages } from './useImages'
import { useKaTeX } from './useKaTeX'
import { sanitizeText } from './helpers'

export type ExportAsPdfWorkerReturnData = {
  successful: Resource[]
  failed: { resourceName: string; error: HttpError }[]
}

type CallbackOptions = {
  successful: Resource[]
  failed: { resourceName: string; error: HttpError }[]
}

export const useExportAsPdfWorker = () => {
  const { createWorker, terminateWorker } = useWebWorkersStore()
  const loadingService = useLoadingService()
  const configStore = useConfigStore()
  const { headers } = useRequestHeaders()
  const { preprocessMermaidCharts } = useMermaid()
  const { preprocessImages } = useImages()
  const { preprocessKaTeXFormulas } = useKaTeX()

  async function startWorker(
    destinationFolder: Resource,
    space: SpaceResource,
    fileName: string,
    content: string,
    callback: (result: CallbackOptions) => void
  ) {
    const worker = createWorker<ExportAsPdfWorkerReturnData>(ExportAsPdfWorker as unknown as string)

    let resolveLoading: (value: unknown) => void

    unref(worker.worker).onmessage = (e: MessageEvent) => {
      terminateWorker(worker.id)
      resolveLoading?.(true)

      const { successful, failed } = JSON.parse(e.data) as ExportAsPdfWorkerReturnData

      callback({ successful, failed })
    }

    loadingService.addTask(
      () =>
        new Promise((res) => {
          resolveLoading = res
        })
    )

    let processedContent = sanitizeText(content)
    processedContent = await preprocessMermaidCharts(processedContent)
    processedContent = await preprocessKaTeXFormulas(processedContent)
    processedContent = await preprocessImages(processedContent)

    worker.post(getWorkerData(destinationFolder, space, fileName, processedContent))
  }

  function getWorkerData(
    destinationFolder: Resource,
    space: SpaceResource,
    fileName: string,
    content: string
  ) {
    return JSON.stringify({
      topic: 'startProcess',
      data: {
        destinationFolder,
        space,
        fileName,
        content,
        baseUrl: configStore.serverUrl,
        headers: {
          ...unref(headers),
          'X-Request-ID': undefined // is being generated by the dav client in the worker
        }
      }
    })
  }

  return { startWorker }
}
